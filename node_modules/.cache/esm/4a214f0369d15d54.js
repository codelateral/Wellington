let bored,startRace,dad,help,schedule,decide,checkForTriggers,handle_playlist;_69d‍.w("./features/bored",[["default",["bored"],function(v){bored=v}]]);_69d‍.w("./features/codeRace",[["default",["startRace"],function(v){startRace=v}]]);_69d‍.w("./features/dad",[["default",["dad"],function(v){dad=v}]]);_69d‍.w("./features/help",[["default",["help"],function(v){help=v}]]);_69d‍.w("./features/schedule",[["default",["schedule"],function(v){schedule=v}]]);_69d‍.w("./features/decide",[["default",["decide"],function(v){decide=v}]]);_69d‍.w("./features/checkForTriggers",[["default",["checkForTriggers"],function(v){checkForTriggers=v}]]);_69d‍.w("./backend/main",[["default",["handle_playlist"],function(v){handle_playlist=v}]]);require("dotenv").config();
// feature/command imports









// discord.js boilerplate
const Discord = require("discord.js");
const client = new Discord.Client();
const prefix = "!";

client.once("ready", () => {
	console.log("Sir Wellington is at your service ;)");
});

let raceStarted = false;
let raceText = null;
let raceChannel = null;
client.on("message", (message) => {
	if (message.author.bot) return;
	// outlier checks
	checkForTriggers(message);

	// race checks
	if (
		raceStarted &&
		raceChannel === message.channel &&
		message.content !== "!race" &&
		message.content !== "!end"
	) {
		if (message.content === raceText) {
			message.reply(`Congratulations, you have won.`);
			raceText = null;
			raceStarted = false;
			raceChannel = null;
		} else {
			let shorterWord;
			let longerWord;
			if (raceText.length > message.content.length) {
				longerWord = raceText.split("");
				shorterWord = message.content.split("");
			} else {
				longerWord = message.content.split("");
				shorterWord = raceText.split("");
			}
			let count = 0;
			for (let i = 0; i < shorterWord.length; i++) {
				if (shorterWord[i] !== longerWord[i] && count === 0) {
					shorterWord[i] = "#";
					count++;
				}
			}
			let correctionString = shorterWord.join("").split("#")[0];
			message.channel.send(
				`
				I'm sorry, that's not correct. I've placed a '#' at the first error I found
**${correctionString}#**
				`
			);
		}
	}

	// begin regular commands
	if (!message.content.startsWith(prefix)) return;

	const args = message.content.slice(prefix.length).split(/ +/);
	const command = args.shift().toLowerCase();

	switch (command) {
		case "commands":
		case "help":
			help(message);
			break;
		case "decide":
			decide(message, args);
			break;
		case "schedule":
			schedule(message);
			break;
		case "dad":
			dad(message);
			break;
		case "bored":
			bored(message);
			break;
		case "playlist":
		case "add":
		case "delete":
			handle_playlist(message);
			break;
	}

	if (command === "end" && raceStarted) {
		raceStarted = false;
		raceChannel = null;
		message.channel.send("Understood. Terminating your race promptly.");
	}

	// checks for trying to start a race while there is an ongoing race
	if (command === "race" && !raceStarted) {
		raceText = startRace(message);
		raceStarted = true;
		raceChannel = message.channel;
	} else if (raceStarted) {
		message.channel.send(
			`You already have an ongoing race. The text is ${raceText}`
		);
	}
});

client.login(process.env.TOKEN);
